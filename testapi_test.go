// Code generated by "./test.py generate"; DO NOT EDIT.

package bcl_test

import (
	"bytes"
	"fmt"
	"strings"
	"testing"

	"github.com/wkhere/bcl"
)

var _ = fmt.Sprintf

type stdinBuf struct{ *strings.Reader }

func (stdinBuf) Name() string { return "/dev/stdin" }
func (stdinBuf) Close() error { return nil }

func TestInterpretFromPy(t *testing.T) {
	var tab = []struct {
		name, input, output string
		disasm              bool
		errWanted           bool
		errMatch            string
	}{
		{`0`, ``, "", false, false, ""},
		{`0.1`, `eval "expr that is discarded"`, "", false, false, ""},
		{`0.2`, `eval nil`, "", false, false, ""},
		{`0.3`, `eval "anything"`, "", false, false, ""},
		{`1`, `var a; print not a`, "true", false, false, ""},
		{`2`, `var a; print a==nil`, "true", false, false, ""},
		{`3`, `var a=1; eval a=nil; print a==nil`, "true", false, false, ""},
		{`4`, `print 1+1`, "2", false, false, ""},
		{`5`, `print 1+2.14`, "3.14", false, false, ""},
		{`6`, `print 123/2-50+2*8`, "27", false, false, ""},
		{`6.1`, `print 123.0/2-50+2*8`, "27.5", false, false, ""},
		{`6.2`, `print 123/2.0-50+2*8`, "27.5", false, false, ""},
		{`6.3`, `print 123.0/2.0-50+2*8`, "27.5", false, false, ""},
		{`6.4`, `print 123/2-50+2.0*8`, "27", false, false, ""},
		{`6.5`, `print 123/2-50+2*8.0`, "27", false, false, ""},
		{`6.6`, `print 123/2-50+2.0*8.0`, "27", false, false, ""},
		{`6.7`, `print 123/2-50.0+2*8`, "27", false, false, ""},
		{`7`, `print 1-2`, "-1", false, false, ""},
		{`8`, `print 1--2`, "3", false, false, ""},
		{`9`, `print 1- +1`, "0", false, false, ""},
		{`10`, `print 1+ +1`, "2", false, false, ""},
		{`10.1`, `print 1.0+ +1`, "2", false, false, ""},
		{`10.2`, `print 1+ +1.0`, "2", false, false, ""},
		{`10.3`, `print 1.0+ +1.0`, "2", false, false, ""},
		{`11`, `print ---10`, "-10", false, false, ""},
		{`11.1`, `print ---10.0`, "-10", false, false, ""},
		{`12`, `print 1==1`, "true", false, false, ""},
		{`12.1`, `print 1.0==1`, "true", false, false, ""},
		{`12.2`, `print 1==1.0`, "true", false, false, ""},
		{`12.3`, `print 1.0==1.0`, "true", false, false, ""},
		{`13`, `print not 1>3`, "true", false, false, ""},
		{`13.1`, `print not 1.0>3`, "true", false, false, ""},
		{`13.2`, `print not 1>3.0`, "true", false, false, ""},
		{`13.3`, `print not 1.0>3.0`, "true", false, false, ""},
		{`13.4`, `print not 3<=1`, "true", false, false, ""},
		{`14`, `print 1<2 and 0 or "whatever"`, "whatever", false, false, ""},
		{`14.1`, `print 1.0<2 and 0 or "whatever"`, "whatever", false, false, ""},
		{`14.2`, `print 1<2.0 and 0 or "whatever"`, "whatever", false, false, ""},
		{`14.3`, `print 1.0<2.0 and 0 or "whatever"`, "whatever", false, false, ""},
		{`14.4`, `print 1<2 and 0.0 or "whatever"`, "whatever", false, false, ""},
		{`14.5`, `print 1.0<2 and 0.0 or "whatever"`, "whatever", false, false, ""},
		{`14.6`, `print 1<2.0 and 0.0 or "whatever"`, "whatever", false, false, ""},
		{`14.7`, `print 1.0<2.0 and 0.0 or "whatever"`, "whatever", false, false, ""},
		{`15`, `print 1>2 or true and 42`, "42", false, false, ""},
		{`16`, `print 1<10/5 and 127*-1+154`, "27", false, false, ""},
		{`17`, `print "q"*2`, "qq", false, false, ""},
		{`18`, `print "q"+"x"`, "qx", false, false, ""},
		{`19`, `print "q"+3`, "q3", false, false, ""},
		{`20`, `print "q"+3.14`, "q3.14", false, false, ""},
		{`21`, `print "q"=="q"`, "true", false, false, ""},
		{`22`, `print "q"!="p"`, "true", false, false, ""},
		{`23`, `print "p"<"q"`, "true", false, false, ""},
		{`24`, `print "q">"p"`, "true", false, false, ""},
		{`25`, `print not (false or true)`, "false", false, false, ""},
		{`25.1`, `print not (false and true)`, "true", false, false, ""},
		{`25.2`, `print "" or 42`, "42", false, false, ""},
		{`26`, `var a=100; var b=a-90; print -b`, "-10", false, false, ""},
		{`27`, `var a=1; var b=2; print a+b`, "3", false, false, ""},
		{`28`, `var a=1; eval a=a+1; print a`, "2", false, false, ""},
		{`29`, `var a=1; print a=a+1`, "2", false, false, ""},
		{`30`, `def blk {print TYPE}`, "blk", false, false, ""},
		{`31`, `def blk "foo" {print TYPE+"."+NAME}`, "blk.foo", false, false, ""},
		{`32`, `var a=1; def blk {print TYPE}`, "blk", false, false, ""},
		{`33`, `print 1; def blk {print TYPE}`, "1\nblk", false, false, ""},
		{`34`, `var a=1; def blk {print TYPE+a}`, "blk1", false, false, ""},
		{`35`, `def blk {var a=1; print TYPE+a}`, "blk1", false, false, ""},
		{`36`, `var x=1; def blk {var a=1+x; print TYPE+a}`, "blk2", false, false, ""},
		{`37`, `def blk {var a=1; var b=2; print TYPE+(a+b)}`, "blk3", false, false, ""},
		{`38`, `var x=5; def blk {var a=1; var b=2; print TYPE+(a+b+x)}`, "blk8", false, false, ""},
		{`39`, `def b1{var x=1; def b2 {var a=2; print TYPE+(a+x)}}`, "b23", false, false, ""},
		{`40`, `var a=5; def blk {var a=a+1; print TYPE+a}`, "blk6", false, false, ""},
		{`41`, `def b1{var a=5; def b2 {var a=a+1; print TYPE+a} print TYPE+a}`, "b26\nb15", false, false, ""},
		{`42`, `def b1{var a=5; def b2 {eval a=a+1; print TYPE+a} print TYPE+a}`, "b26\nb16", false, false, ""},
		{`43`, `def b1{ print TYPE; def b2{print TYPE} }; def b3{print TYPE}`, "b1\nb2\nb3", false, false, ""},
		{`44`, `var a; var b; eval a=1+(b=2); print a`, "3", false, false, ""},
		{`45`, `var a; var b; print a=1+(b=2)`, "3", false, false, ""},
		{`46`, `def x {42}`, "", false, false, ""},
		{`47`, `def x {var x=42; x+1; print x}`, "42", false, false, ""},
		{`48`, `def x {a=1+(b=2); print a}`, "3", false, false, ""},
		{`49`, `def x {print a=1+(b=2)}`, "3", false, false, ""},
		{`50`, `def x {print (a=1)+(b=2)}`, "3", false, false, ""},
		{`51`, ``, "== /dev/stdin ==\n0000    1:1  RET", true, false, ""},
		{`52`, `eval nil`, "== /dev/stdin ==\n0000    1:9  NIL\n0001      |  POP\n0002      |  RET", true, false, ""},
		{`53`, `eval 42`, "== /dev/stdin ==\n0000    1:8  CONST         0 '42'\n0002      |  POP\n0003      |  RET", true, false, ""},
		{`54`, `def b {}`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004      |  RET", true, false, ""},
		{`55`, `1`, "", false, true, `expected statement`},
		{`55.1`, `=1`, "", false, true, `expected statement`},
		{`56`, `print`, "", false, true, `at end: expected expression`},
		{`56.1`, `print print`, "", false, true, `at 'print': expected expression`},
		{`56.2`, `print =`, "", false, true, `at '=': expected expression`},
		{`57`, `eval`, "", false, true, `expected expression`},
		{`58`, `eval (1`, "", false, true, `expected ')'`},
		{`59`, `def 1`, "", false, true, `at '1': expected block type`},
		{`60`, `def b {`, "", false, true, `at end: expected '}'`},
		{`61.1`, `def b x {}`, "", false, true, `at 'x': expected '{'`},
		{`61.2`, `def b 0 {}`, "", false, true, `at '0': expected '{'`},
		{`62.1`, `def b "x" {`, "", false, true, `at end: expected '}'`},
		{`62.2`, `def b "x" { z`, "", false, true, `at end: expected '}'`},
		{`63.1`, `eval 1 =`, "", false, true, `at '=': invalid assignment target`},
		{`63.2`, `eval "a" = `, "", false, true, `at '=': invalid assignment target`},
		{`63.3`, `eval false = `, "", false, true, `at '=': invalid assignment target`},
		{`64`, `eval a=42`, "", false, true, `at '=': invalid assignment target`},
		{`65`, `var a; var a`, "", false, true, `at 'a': variable with this name already present`},
		{`66`, `eval a`, "", false, true, `at 'a': undefined variable`},
		{`67.1`, `print -1`, "-1", false, false, ""},
		{`67.2`, `print -1.2`, "-1.2", false, false, ""},
		{`67.3`, `print -(1)`, "-1", false, false, ""},
		{`67.4`, `print -(1.2)`, "-1.2", false, false, ""},
		{`67.5`, `var a=1;   print -a`, "-1", false, false, ""},
		{`67.6`, `var a=1.2; print -a`, "-1.2", false, false, ""},
		{`67.7`, `print -true`, "", false, true, `NEG: invalid type: bool, expected number`},
		{`67.8`, `print -"abc"`, "", false, true, `NEG: invalid type: string, expected number`},
		{`67.9`, `print -nil`, "", false, true, `NEG: invalid type: nil, expected number`},
		{`68.1`, `print +1`, "1", false, false, ""},
		{`68.2`, `print +1.2`, "1.2", false, false, ""},
		{`68.3`, `print +(1)`, "1", false, false, ""},
		{`68.4`, `print +(1.2)`, "1.2", false, false, ""},
		{`67.5`, `var a=1;   print +a`, "1", false, false, ""},
		{`67.6`, `var a=1.2; print +a`, "1.2", false, false, ""},
		{`68.7`, `print +true`, "", false, true, `UNPLUS: invalid type: bool, expected number`},
		{`68.8`, `print +"abcd"`, "", false, true, `UNPLUS: invalid type: string, expected number`},
		{`68.9`, `print +nil`, "", false, true, `UNPLUS: invalid type: nil, expected number`},
		{`69`, `print *1`, "", false, true, `at '*': expected expression`},
		{`70`, `print /1`, "", false, true, `at '/': expected expression`},
		{`71.1`, `print 1+2`, "3", false, false, ""},
		{`71.2`, `print 1+2.5`, "3.5", false, false, ""},
		{`71.3`, `print 1+true`, "", false, true, `ADD: invalid types: int, bool`},
		{`71.4`, `print 1+"ab"`, "", false, true, `ADD: invalid types: int, string`},
		{`71.5`, `print 1+nil`, "", false, true, `ADD: invalid types: int, nil`},
		{`72.1`, `print 1.2+5`, "6.2", false, false, ""},
		{`72.2`, `print 1.2+3.5`, "4.7", false, false, ""},
		{`72.3`, `print 1.2+true`, "", false, true, `ADD: invalid types: float, bool`},
		{`72.4`, `print 1.2+"ab"`, "", false, true, `ADD: invalid types: float, string`},
		{`72.5`, `print 1.2+nil`, "", false, true, `ADD: invalid types: float, nil`},
		{`73.1`, `print true+1`, "", false, true, `ADD: invalid types: bool, int`},
		{`73.2`, `print true+1.2`, "", false, true, `ADD: invalid types: bool, float`},
		{`73.3`, `print true+true`, "", false, true, `ADD: invalid types: bool, bool`},
		{`73.4`, `print true+"ab"`, "", false, true, `ADD: invalid types: bool, string`},
		{`73.5`, `print true+nil`, "", false, true, `ADD: invalid types: bool, nil`},
		{`74.1`, `print "ab"+1`, "ab1", false, false, ""},
		{`74.2`, `print "ab"+1.2`, "ab1.2", false, false, ""},
		{`74.3`, `print "ab"+true`, "", false, true, `ADD: invalid types: string, bool`},
		{`74.4`, `print "ab"+"cd"`, "abcd", false, false, ""},
		{`74.5`, `print "ab"+nil`, "ab", false, false, ""},
		{`75.1`, `print nil+1`, "", false, true, `ADD: invalid types: nil, int`},
		{`75.2`, `print nil+1.2`, "", false, true, `ADD: invalid types: nil, float`},
		{`75.3`, `print nil+true`, "", false, true, `ADD: invalid types: nil, bool`},
		{`75.4`, `print nil+"ab"`, "", false, true, `ADD: invalid types: nil, string`},
		{`75.5`, `print nil+nil`, "", false, true, `ADD: invalid types: nil, nil`},
		{`76.1`, `print 1-2`, "-1", false, false, ""},
		{`76.2`, `print 1-2.5`, "-1.5", false, false, ""},
		{`76.3`, `print 1-true`, "", false, true, `SUB: invalid types: int, bool`},
		{`76.4`, `print 1-"ab"`, "", false, true, `SUB: invalid types: int, string`},
		{`76.5`, `print 1-nil`, "", false, true, `SUB: invalid types: int, nil`},
		{`77.1`, `print 1.5-2`, "-0.5", false, false, ""},
		{`77.2`, `print 1.0-2.5`, "-1.5", false, false, ""},
		{`77.3`, `print 1.2-true`, "", false, true, `SUB: invalid types: float, bool`},
		{`77.4`, `print 1.2-"ab"`, "", false, true, `SUB: invalid types: float, string`},
		{`77.5`, `print 1.2-nil`, "", false, true, `SUB: invalid types: float, nil`},
		{`78.1`, `print true-1`, "", false, true, `SUB: invalid types: bool, int`},
		{`78.2`, `print true-1.2`, "", false, true, `SUB: invalid types: bool, float`},
		{`78.3`, `print true-true`, "", false, true, `SUB: invalid types: bool, bool`},
		{`78.4`, `print true-"ab"`, "", false, true, `SUB: invalid types: bool, string`},
		{`78.5`, `print true-nil`, "", false, true, `SUB: invalid types: bool, nil`},
		{`79.1`, `print "ab"-1`, "", false, true, `SUB: invalid types: string, int`},
		{`79.2`, `print "ab"-1.2`, "", false, true, `SUB: invalid types: string, float`},
		{`79.3`, `print "ab"-true`, "", false, true, `SUB: invalid types: string, bool`},
		{`79.4`, `print "ab"-"cd"`, "", false, true, `SUB: invalid types: string, string`},
		{`79.5`, `print "ab"-nil`, "", false, true, `SUB: invalid types: string, nil`},
		{`80.1`, `print nil-1`, "", false, true, `SUB: invalid types: nil, int`},
		{`80.2`, `print nil-1.2`, "", false, true, `SUB: invalid types: nil, float`},
		{`80.3`, `print nil-true`, "", false, true, `SUB: invalid types: nil, bool`},
		{`80.4`, `print nil-"ab"`, "", false, true, `SUB: invalid types: nil, string`},
		{`80.5`, `print nil-nil`, "", false, true, `SUB: invalid types: nil, nil`},
		{`81.1`, `print 1*2`, "2", false, false, ""},
		{`81.2`, `print 1*2.5`, "2.5", false, false, ""},
		{`81.3`, `print 1*true`, "", false, true, `MUL: invalid types: int, bool`},
		{`81.4`, `print 1*"ab"`, "", false, true, `MUL: invalid types: int, string`},
		{`81.5`, `print 1*nil`, "", false, true, `MUL: invalid types: int, nil`},
		{`82.1`, `print 1.4*2`, "2.8", false, false, ""},
		{`82.2`, `print 1.0*2.5`, "2.5", false, false, ""},
		{`82.3`, `print 1.2*true`, "", false, true, `MUL: invalid types: float, bool`},
		{`82.4`, `print 1.2*"ab"`, "", false, true, `MUL: invalid types: float, string`},
		{`82.5`, `print 1.2*nil`, "", false, true, `MUL: invalid types: float, nil`},
		{`83.1`, `print true*1`, "", false, true, `MUL: invalid types: bool, int`},
		{`83.2`, `print true*1.2`, "", false, true, `MUL: invalid types: bool, float`},
		{`83.3`, `print true*true`, "", false, true, `MUL: invalid types: bool, bool`},
		{`83.4`, `print true*"ab"`, "", false, true, `MUL: invalid types: bool, string`},
		{`83.5`, `print true*nil`, "", false, true, `MUL: invalid types: bool, nil`},
		{`84.1`, `print "ab"*2`, "abab", false, false, ""},
		{`84.2`, `print "ab"*1.2`, "", false, true, `MUL: invalid types: string, float`},
		{`84.3`, `print "ab"*true`, "", false, true, `MUL: invalid types: string, bool`},
		{`84.4`, `print "ab"*"cd"`, "", false, true, `MUL: invalid types: string, string`},
		{`84.5`, `print "ab"*nil`, "", false, true, `MUL: invalid types: string, nil`},
		{`85.1`, `print nil*1`, "", false, true, `MUL: invalid types: nil, int`},
		{`85.2`, `print nil*1.2`, "", false, true, `MUL: invalid types: nil, float`},
		{`85.3`, `print nil*true`, "", false, true, `MUL: invalid types: nil, bool`},
		{`85.4`, `print nil*"ab"`, "", false, true, `MUL: invalid types: nil, string`},
		{`85.5`, `print nil*nil`, "", false, true, `MUL: invalid types: nil, nil`},
		{`86.1`, `print 1/2`, "0", false, false, ""},
		{`86.2`, `print 1/2.0`, "0.5", false, false, ""},
		{`86.3`, `print 1/true`, "", false, true, `DIV: invalid types: int, bool`},
		{`86.4`, `print 1/"ab"`, "", false, true, `DIV: invalid types: int, string`},
		{`86.5`, `print 1/nil`, "", false, true, `DIV: invalid types: int, nil`},
		{`87.1`, `print 1.0/2`, "0.5", false, false, ""},
		{`87.2`, `print 1.0/2.0`, "0.5", false, false, ""},
		{`87.3`, `print 1.2/true`, "", false, true, `DIV: invalid types: float, bool`},
		{`87.4`, `print 1.2/"ab"`, "", false, true, `DIV: invalid types: float, string`},
		{`87.5`, `print 1.2/nil`, "", false, true, `DIV: invalid types: float, nil`},
		{`88.1`, `print true/1`, "", false, true, `DIV: invalid types: bool, int`},
		{`88.2`, `print true/1.2`, "", false, true, `DIV: invalid types: bool, float`},
		{`88.3`, `print true/true`, "", false, true, `DIV: invalid types: bool, bool`},
		{`88.4`, `print true/"ab"`, "", false, true, `DIV: invalid types: bool, string`},
		{`88.5`, `print true/nil`, "", false, true, `DIV: invalid types: bool, nil`},
		{`89.1`, `print "ab"/2`, "", false, true, `DIV: invalid types: string, int`},
		{`89.2`, `print "ab"/1.2`, "", false, true, `DIV: invalid types: string, float`},
		{`89.3`, `print "ab"/true`, "", false, true, `DIV: invalid types: string, bool`},
		{`89.4`, `print "ab"/"cd"`, "", false, true, `DIV: invalid types: string, string`},
		{`89.5`, `print "ab"/nil`, "", false, true, `DIV: invalid types: string, nil`},
		{`90.1`, `print nil/1`, "", false, true, `DIV: invalid types: nil, int`},
		{`90.2`, `print nil/1.2`, "", false, true, `DIV: invalid types: nil, float`},
		{`90.3`, `print nil/true`, "", false, true, `DIV: invalid types: nil, bool`},
		{`90.4`, `print nil/"ab"`, "", false, true, `DIV: invalid types: nil, string`},
		{`90.5`, `print nil/nil`, "", false, true, `DIV: invalid types: nil, nil`},
		{`91.1`, `print 1==1`, "true", false, false, ""},
		{`91.2`, `print 1==1.0`, "true", false, false, ""},
		{`91.3`, `print 1==true`, "false", false, false, ""},
		{`91.4`, `print 1=="ab"`, "false", false, false, ""},
		{`91.5`, `print 1==nil`, "false", false, false, ""},
		{`92.1`, `print 1.0==1`, "true", false, false, ""},
		{`92.2`, `print 1.0==1.0`, "true", false, false, ""},
		{`92.3`, `print 1.2==true`, "false", false, false, ""},
		{`92.4`, `print 1.2=="ab"`, "false", false, false, ""},
		{`92.5`, `print 1.2==nil`, "false", false, false, ""},
		{`93.1`, `print true==1`, "false", false, false, ""},
		{`93.2`, `print true==1.2`, "false", false, false, ""},
		{`93.3`, `print true==true`, "true", false, false, ""},
		{`93.4`, `print true=="ab"`, "false", false, false, ""},
		{`93.5`, `print true==nil`, "false", false, false, ""},
		{`94.1`, `print "ab"==2`, "false", false, false, ""},
		{`94.2`, `print "ab"==1.2`, "false", false, false, ""},
		{`94.3`, `print "ab"==true`, "false", false, false, ""},
		{`94.4`, `print "ab"=="cd"`, "false", false, false, ""},
		{`94.5`, `print "ab"==nil`, "false", false, false, ""},
		{`95.1`, `print nil==1`, "false", false, false, ""},
		{`95.2`, `print nil==1.2`, "false", false, false, ""},
		{`95.3`, `print nil==true`, "false", false, false, ""},
		{`95.4`, `print nil=="ab"`, "false", false, false, ""},
		{`95.5`, `print nil==nil`, "true", false, false, ""},
		{`96.1`, `print 1<2`, "true", false, false, ""},
		{`96.2`, `print 1<2.0`, "true", false, false, ""},
		{`96.3`, `print 1<true`, "", false, true, `LT: invalid types: int, bool`},
		{`96.4`, `print 1<"ab"`, "", false, true, `LT: invalid types: int, string`},
		{`96.5`, `print 1<nil`, "", false, true, `LT: invalid types: int, nil`},
		{`97.1`, `print 1.0<2`, "true", false, false, ""},
		{`97.2`, `print 1.0<2.0`, "true", false, false, ""},
		{`97.3`, `print 1.2<true`, "", false, true, `LT: invalid types: float, bool`},
		{`97.4`, `print 1.2<"ab"`, "", false, true, `LT: invalid types: float, string`},
		{`97.5`, `print 1.2<nil`, "", false, true, `LT: invalid types: float, nil`},
		{`98.1`, `print true<1`, "", false, true, `LT: invalid types: bool, int`},
		{`98.2`, `print true<1.0`, "", false, true, `LT: invalid types: bool, float`},
		{`98.3`, `print true<true`, "", false, true, `LT: invalid types: bool, bool`},
		{`98.4`, `print true<"ab"`, "", false, true, `LT: invalid types: bool, string`},
		{`98.5`, `print true<nil`, "", false, true, `LT: invalid types: bool, nil`},
		{`99.1`, `print "ab"<2`, "", false, true, `LT: invalid types: string, int`},
		{`99.2`, `print "ab"<1.2`, "", false, true, `LT: invalid types: string, float`},
		{`99.3`, `print "ab"<true`, "", false, true, `LT: invalid types: string, bool`},
		{`99.4`, `print "ab"<"cd"`, "true", false, false, ""},
		{`99.5`, `print "ab"<nil`, "", false, true, `LT: invalid types: string, nil`},
		{`100.1`, `print nil<1`, "", false, true, `LT: invalid types: nil, int`},
		{`100.2`, `print nil<1.2`, "", false, true, `LT: invalid types: nil, float`},
		{`100.3`, `print nil<true`, "", false, true, `LT: invalid types: nil, bool`},
		{`100.4`, `print nil<"ab"`, "", false, true, `LT: invalid types: nil, string`},
		{`100.5`, `print nil<nil`, "", false, true, `LT: invalid types: nil, nil`},
		{`101.1`, `print 1>2`, "false", false, false, ""},
		{`101.2`, `print 1>2.0`, "false", false, false, ""},
		{`101.3`, `print 1>true`, "", false, true, `GT: invalid types: int, bool`},
		{`101.4`, `print 1>"ab"`, "", false, true, `GT: invalid types: int, string`},
		{`101.5`, `print 1>nil`, "", false, true, `GT: invalid types: int, nil`},
		{`102.1`, `print 1.0>2`, "false", false, false, ""},
		{`102.2`, `print 1.0>2.0`, "false", false, false, ""},
		{`102.3`, `print 1.2>true`, "", false, true, `GT: invalid types: float, bool`},
		{`102.4`, `print 1.2>"ab"`, "", false, true, `GT: invalid types: float, string`},
		{`102.5`, `print 1.2>nil`, "", false, true, `GT: invalid types: float, nil`},
		{`103.1`, `print true>1`, "", false, true, `GT: invalid types: bool, int`},
		{`103.2`, `print true>1.0`, "", false, true, `GT: invalid types: bool, float`},
		{`103.3`, `print true>true`, "", false, true, `GT: invalid types: bool, bool`},
		{`103.4`, `print true>"ab"`, "", false, true, `GT: invalid types: bool, string`},
		{`103.5`, `print true>nil`, "", false, true, `GT: invalid types: bool, nil`},
		{`104.1`, `print "ab">2`, "", false, true, `GT: invalid types: string, int`},
		{`104.2`, `print "ab">1.2`, "", false, true, `GT: invalid types: string, float`},
		{`104.3`, `print "ab">true`, "", false, true, `GT: invalid types: string, bool`},
		{`104.4`, `print "ab">"cd"`, "false", false, false, ""},
		{`104.5`, `print "ab">nil`, "", false, true, `GT: invalid types: string, nil`},
		{`105.1`, `print nil>1`, "", false, true, `GT: invalid types: nil, int`},
		{`105.2`, `print nil>1.2`, "", false, true, `GT: invalid types: nil, float`},
		{`105.3`, `print nil>true`, "", false, true, `GT: invalid types: nil, bool`},
		{`105.4`, `print nil>"ab"`, "", false, true, `GT: invalid types: nil, string`},
		{`105.5`, `print nil>nil`, "", false, true, `GT: invalid types: nil, nil`},
		{`106.1`, `print not 0`, "true", false, false, ""},
		{`106.2`, `print not 0.0`, "true", false, false, ""},
		{`106.3`, `print not false`, "true", false, false, ""},
		{`106.4`, `print not ""`, "true", false, false, ""},
		{`106.5`, `print not nil`, "true", false, false, ""},
		{`107.1`, `print 1 or 2`, "1", false, false, ""},
		{`107.2`, `print 1 or 2.0`, "1", false, false, ""},
		{`107.3`, `print 1 or true`, "1", false, false, ""},
		{`107.4`, `print 1 or "ab"`, "1", false, false, ""},
		{`107.5`, `print 1 or nil`, "1", false, false, ""},
		{`108.1`, `print 1.2 or 2`, "1.2", false, false, ""},
		{`108.2`, `print 1.2 or 2.0`, "1.2", false, false, ""},
		{`108.3`, `print 1.2 or true`, "1.2", false, false, ""},
		{`108.4`, `print 1.2 or "ab"`, "1.2", false, false, ""},
		{`108.5`, `print 1.2 or nil`, "1.2", false, false, ""},
		{`109.1`, `print true or 1`, "true", false, false, ""},
		{`109.2`, `print true or 1.0`, "true", false, false, ""},
		{`109.3`, `print true or true`, "true", false, false, ""},
		{`109.4`, `print true or "ab"`, "true", false, false, ""},
		{`109.5`, `print true or nil`, "true", false, false, ""},
		{`110.1`, `print "ab" or 2`, "ab", false, false, ""},
		{`110.2`, `print "ab" or 1.2`, "ab", false, false, ""},
		{`110.3`, `print "ab" or true`, "ab", false, false, ""},
		{`110.4`, `print "ab" or "cd"`, "ab", false, false, ""},
		{`110.5`, `print "ab" or nil`, "ab", false, false, ""},
		{`112.1`, `print nil or 1`, "1", false, false, ""},
		{`112.2`, `print nil or 1.2`, "1.2", false, false, ""},
		{`112.3`, `print nil or true`, "true", false, false, ""},
		{`112.4`, `print nil or "ab"`, "ab", false, false, ""},
		{`112.5`, `print nil or nil`, "<nil>", false, false, ""},
		{`113.1`, `print 1 and 2`, "2", false, false, ""},
		{`113.2`, `print 1 and 2.5`, "2.5", false, false, ""},
		{`113.3`, `print 1 and true`, "true", false, false, ""},
		{`113.4`, `print 1 and "ab"`, "ab", false, false, ""},
		{`113.5`, `print 1 and nil`, "<nil>", false, false, ""},
		{`114.1`, `print 1.2 and 2`, "2", false, false, ""},
		{`114.2`, `print 1.2 and 2.5`, "2.5", false, false, ""},
		{`114.3`, `print 1.2 and true`, "true", false, false, ""},
		{`114.4`, `print 1.2 and "ab"`, "ab", false, false, ""},
		{`114.5`, `print 1.2 and nil`, "<nil>", false, false, ""},
		{`115.1`, `print true and 2`, "2", false, false, ""},
		{`115.2`, `print true and 2.5`, "2.5", false, false, ""},
		{`115.3`, `print true and true`, "true", false, false, ""},
		{`115.4`, `print true and "ab"`, "ab", false, false, ""},
		{`115.5`, `print true and nil`, "<nil>", false, false, ""},
		{`116.1`, `print "ab" and 2`, "2", false, false, ""},
		{`116.2`, `print "ab" and 2.5`, "2.5", false, false, ""},
		{`116.3`, `print "ab" and true`, "true", false, false, ""},
		{`116.4`, `print "ab" and "cd"`, "cd", false, false, ""},
		{`116.5`, `print "ab" and nil`, "<nil>", false, false, ""},
		{`117.1`, `print nil and 2`, "<nil>", false, false, ""},
		{`117.2`, `print nil and 2.5`, "<nil>", false, false, ""},
		{`117.3`, `print nil and true`, "<nil>", false, false, ""},
		{`117.4`, `print nil and "ab"`, "<nil>", false, false, ""},
		{`117.5`, `print nil and nil`, "<nil>", false, false, ""},
		{`120`, `def b{x}`, "", false, true, `'x' not resolved as var or field`},
		{`121.1`, `print 1/0`, "", false, true, `division by int zero`},
		{`121.2`, `print 1/0.0`, "+Inf", false, false, ""},
		{`122.1`, `print  2147483647-1`, "2147483646", false, false, ""},
		{`122.2`, `print -2147483647+1`, "-2147483646", false, false, ""},
		{`123.1`, `var a; print "foo"+(a=1); print a`, "foo1\n1", false, false, ""},
		{`123.2`, `var a; print 2+(a=1); print a`, "3\n1", false, false, ""},
		{`123.3`, `def b{print "foo"+(a=1); print a}`, "foo1\n1", false, false, ""},
		{`123.4`, `def b{var a; print "foo"+(a=1); print a}`, "foo1\n1", false, false, ""},
		{`124.1`, `eval 42q`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c42q%[1]c`, '`')},
		{`124.2`, `eval 42"q"`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c42"%[1]c`, '`')},
		{`124.3`, `eval 42.0q`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c42.0q%[1]c`, '`')},
		{`124.4`, `eval 0x42q`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c0x42q%[1]c`, '`')},
		{`124.5`, `eval 42.0"q"`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c42.0"%[1]c`, '`')},
		{`124.6`, `eval 0x42"q"`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c0x42"%[1]c`, '`')},
		{`124.7`, `eval var"q"`, "", false, true, fmt.Sprintf(`invalid syntax %[1]cvar"%[1]c`, '`')},
		{`124.8`, `eval foo"q"`, "", false, true, fmt.Sprintf(`invalid syntax %[1]cfoo"%[1]c`, '`')},
		{`124.9`, `eval "foo"1`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c"foo"1%[1]c`, '`')},
		{`124.10`, `eval "foo"q`, "", false, true, fmt.Sprintf(`invalid syntax %[1]c"foo"q%[1]c`, '`')},
		{`125.1`, `def b {}; bind b`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004   1:17  BIND 0x11     0 'b'\t   0#\n0008      |  RET", true, false, ""},
		{`125.2`, `def b {}; bind b:all`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004   1:21  BIND 0x2F     0 'b'\t   0#\n0008      |  RET", true, false, ""},
		{`125.3`, `def b {}; def b{x=1}; bind b:first`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004   1:17  DEFBLOCK      0 'b'\t   1 ''\n0007   1:20  ONE\n0008      |  SETFIELD      2 'x'\n0010      |  POP\n0011   1:21  ENDBLOCK\n0012   1:35  BIND 0x12     0 'b'\t   0#\n0016      |  RET", true, false, ""},
		{`125.4`, `def b {}; def b{x=1}; bind b:last`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004   1:17  DEFBLOCK      0 'b'\t   1 ''\n0007   1:20  ONE\n0008      |  SETFIELD      2 'x'\n0010      |  POP\n0011   1:21  ENDBLOCK\n0012   1:34  BIND 0x13     0 'b'\t   0#\n0016      |  RET", true, false, ""},
		{`125.5`, `def b {}; def b{x=1}; bind b:all`, "== /dev/stdin ==\n0000    1:8  DEFBLOCK      0 'b'\t   1 ''\n0003    1:9  ENDBLOCK\n0004   1:17  DEFBLOCK      0 'b'\t   1 ''\n0007   1:20  ONE\n0008      |  SETFIELD      2 'x'\n0010      |  POP\n0011   1:21  ENDBLOCK\n0012   1:33  BIND 0x2F     0 'b'\t   0#\n0016      |  RET", true, false, ""},
		{`126.1`, `bind x`, "", false, true, `no blocks of type x`},
		{`126.2`, `def x{}; def x{}; bind x`, "", false, true, `found 2 blocks of type x`},
		{`126.3`, `def x{}; def x{}; bind x:1`, "", false, true, `found 2 blocks of type x`},
		{`126.4`, `def x{}; bind x:   `, "", false, true, `expected block selector`},
		{`126.5`, `def x{}; bind x:foo`, "", false, true, `expected block selector`},
		{`126.6`, `def x{}; bind x; bind x:all`, "", false, false, ""},
		{`127.1`, `def b "foo"{}; bind b:"foo"`, "== /dev/stdin ==\n0000   1:13  DEFBLOCK      0 'b'\t   1 'foo'\n0003   1:14  ENDBLOCK\n0004   1:28  BIND 0x14     0 'b'\t   1#\t   2 'foo'\n0009      |  RET", true, false, ""},
		{`127.2`, `def b "foo"{}; def b "bar"{}; bind b:"bar"`, "== /dev/stdin ==\n0000   1:13  DEFBLOCK      0 'b'\t   1 'foo'\n0003   1:14  ENDBLOCK\n0004   1:28  DEFBLOCK      0 'b'\t   2 'bar'\n0007   1:29  ENDBLOCK\n0008   1:43  BIND 0x14     0 'b'\t   1#\t   3 'bar'\n0013      |  RET", true, false, ""},
		{`128.1`, `bind x:"foo"`, "", false, true, `no blocks of type x`},
		{`128.2`, `def x{}; bind x:"foo"`, "", false, true, `block x:"foo" not found`},
		{`128.3`, `def x "a"{}; bind x:"foo"`, "", false, true, `block x:"foo" not found`},
		{`128.4`, `def x "a"{}; bind x:"foo",`, "", false, true, `block x:"foo" not found`},
		{`128.5`, `def x "a"{}; def x "b"{}; bind x:"a"`, "", false, false, ""},
		{`128.6`, `def x "a"{}; def x "b"{}; bind x:"b"`, "", false, false, ""},
		{`128.7`, `def x "a"{}; bind x:"a",`, "", false, false, ""},
		{`128.8`, `def x "a"{}; def x "b"{}; bind x:"a",`, "", false, false, ""},
		{`128.9`, `def x "a"{}; def x "b"{}; bind x:"b",`, "", false, false, ""},
		{`129.1`, `def b "foo"{}; bind b:"foo",`, "== /dev/stdin ==\n0000   1:13  DEFBLOCK      0 'b'\t   1 'foo'\n0003   1:14  ENDBLOCK\n0004   1:29  BIND 0x25     0 'b'\t   1#\t   2 'foo'\n0009      |  RET", true, false, ""},
		{`129.2`, `def b "foo"{}; def b "bar"{}; bind b:"foo","bar"`, "== /dev/stdin ==\n0000   1:13  DEFBLOCK      0 'b'\t   1 'foo'\n0003   1:14  ENDBLOCK\n0004   1:28  DEFBLOCK      0 'b'\t   2 'bar'\n0007   1:29  ENDBLOCK\n0008   1:49  BIND 0x25     0 'b'\t   2#\t   3 'foo'\t   4 'bar'\n0014      |  RET", true, false, ""},
		{`130.1`, `def x "a"{}; bind x:"a",`, "", false, false, ""},
		{`130.2`, `def x "a"{}; def x "b"{}; bind x:"a","b"`, "", false, false, ""},
		{`130.3`, `def x "a"{}; def x "b"{}; bind x:"a","b",`, "", false, false, ""},
		{`130.4`, `def x "a"{}; bind x:"foo",`, "", false, true, `block x:"foo" not found`},
		{`130.5`, `def x "a"{}; def x "b"{}; bind x:"c",`, "", false, true, `block x:"c" not found`},
		{`131.1`, `bind {}`, "== /dev/stdin ==\n0000    1:7  DEFUBIND\n0001    1:8  ENDUBIND\n0002      |  RET", true, false, ""},
		{`131.2`, `def x{}; bind {x}`, "== /dev/stdin ==\n0000    1:7  DEFBLOCK      0 'x'\t   1 ''\n0003    1:8  ENDBLOCK\n0004   1:16  DEFUBIND\n0005   1:17  BIND 0x11     0 'x'\t   0#\n0009   1:18  ENDUBIND\n0010      |  RET", true, false, ""},
		{`131.3`, `def x{}; def y{}; bind {x; y:all}`, "== /dev/stdin ==\n0000    1:7  DEFBLOCK      0 'x'\t   1 ''\n0003    1:8  ENDBLOCK\n0004   1:16  DEFBLOCK      2 'y'\t   1 ''\n0007   1:17  ENDBLOCK\n0008   1:25  DEFUBIND\n0009   1:26  BIND 0x11     0 'x'\t   0#\n0013   1:33  BIND 0x2F     2 'y'\t   0#\n0017   1:34  ENDUBIND\n0018      |  RET", true, false, ""},
		{`131.4`, `def x{}; def y{}; bind {y; x:all}`, "== /dev/stdin ==\n0000    1:7  DEFBLOCK      0 'x'\t   1 ''\n0003    1:8  ENDBLOCK\n0004   1:16  DEFBLOCK      2 'y'\t   1 ''\n0007   1:17  ENDBLOCK\n0008   1:25  DEFUBIND\n0009   1:26  BIND 0x11     2 'y'\t   0#\n0013   1:33  BIND 0x2F     0 'x'\t   0#\n0017   1:34  ENDUBIND\n0018      |  RET", true, false, ""},
		{`131.5`, `def x{}; def y{}; bind {x:first; y:last}`, "== /dev/stdin ==\n0000    1:7  DEFBLOCK      0 'x'\t   1 ''\n0003    1:8  ENDBLOCK\n0004   1:16  DEFBLOCK      2 'y'\t   1 ''\n0007   1:17  ENDBLOCK\n0008   1:25  DEFUBIND\n0009   1:32  BIND 0x12     0 'x'\t   0#\n0013   1:40  BIND 0x13     2 'y'\t   0#\n0017   1:41  ENDUBIND\n0018      |  RET", true, false, ""},
		{`131.6`, `def x{}; def y{}; bind {x:last; y:first}`, "== /dev/stdin ==\n0000    1:7  DEFBLOCK      0 'x'\t   1 ''\n0003    1:8  ENDBLOCK\n0004   1:16  DEFBLOCK      2 'y'\t   1 ''\n0007   1:17  ENDBLOCK\n0008   1:25  DEFUBIND\n0009   1:31  BIND 0x13     0 'x'\t   0#\n0013   1:40  BIND 0x12     2 'y'\t   0#\n0017   1:41  ENDUBIND\n0018      |  RET", true, false, ""},
		{`131.7`, `def x "a"{}; bind {x:"a"}`, "== /dev/stdin ==\n0000   1:11  DEFBLOCK      0 'x'\t   1 'a'\n0003   1:12  ENDBLOCK\n0004   1:20  DEFUBIND\n0005   1:25  BIND 0x14     0 'x'\t   1#\t   2 'a'\n0010   1:26  ENDUBIND\n0011      |  RET", true, false, ""},
		{`131.8`, `def x "a"{}; bind {x:"a",}`, "== /dev/stdin ==\n0000   1:11  DEFBLOCK      0 'x'\t   1 'a'\n0003   1:12  ENDBLOCK\n0004   1:20  DEFUBIND\n0005   1:26  BIND 0x25     0 'x'\t   1#\t   2 'a'\n0010   1:27  ENDUBIND\n0011      |  RET", true, false, ""},
		{`132.1`, `bind {}`, "", false, false, ""},
		{`132.2`, `def x{}; bind {x}`, "", false, false, ""},
		{`132.3`, `def x{}; bind {x:all}`, "", false, false, ""},
		{`132.4`, `def x{}; def y{}; bind {x; y}`, "", false, false, ""},
		{`132.5`, `def x{}; def y{}; bind {x; y:all}`, "", false, false, ""},
		{`132.6`, `def x{}; def y{}; bind {x:all; y}`, "", false, false, ""},
		{`133.1`, `bind {42x}`, "", false, true, `invalid syntax`},
		{`133.2`, `bind {x}`, "", false, true, `no blocks of type x`},
		{`133.3`, `def x{}; bind {x:"a"}`, "", false, true, `block x:"a" not found`},
		{`133.4`, `def x{}; bind {x:"a",}`, "", false, true, `block x:"a" not found`},
		{`133.5`, `bind{bind}`, "", false, true, `expected block type`},
		{`133.6`, `bind{bind{}}`, "", false, true, `expected block type`},
		{`122.1-64`, `print  9223372036854775807-1`, "9223372036854775806", false, false, ""},
		{`122.2-64`, `print -9223372036854775807+1`, "-9223372036854775806", false, false, ""},
	}

	for _, tc := range tab {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			inp := stdinBuf{strings.NewReader(tc.input)}
			out := new(bytes.Buffer)
			log := new(bytes.Buffer)

			_, _, err := bcl.InterpretFile(
				inp,
				bcl.OptDisasm(tc.disasm),
				bcl.OptOutput(out), bcl.OptLogger(log),
			)

			switch {
			case err != nil && !tc.errWanted:
				t.Errorf("unexpected error: %s", relevantError(err, log))

			case err != nil && tc.errWanted:
				rerr := relevantError(err, log)
				if !strings.Contains(rerr, tc.errMatch) {
					t.Errorf("error mismatch\nhave: %s\nwant matching: %s",
						rerr, tc.errMatch,
					)
				}

			case err == nil && tc.errWanted && tc.errMatch == "":
				t.Errorf("no error when expecting one")

			case err == nil && tc.errWanted && tc.errMatch != "":
				t.Errorf("no error when expecting one matching: %s", tc.errMatch)

			case err == nil && !tc.errWanted:
				s := strings.TrimRight(out.String(), "\n")
				if s != tc.output {
					t.Errorf("mismatch:\nhave: %s\nwant: %s", s, tc.output)
				}
			}
		})
	}
}

func relevantError(err error, buf *bytes.Buffer) string {
	if s := err.Error(); strings.HasPrefix(s, "combined errors") {
		return strings.TrimRight(buf.String(), "\n")
	} else {
		return s
	}
}
