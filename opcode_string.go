// Code generated by "stringer -type opcode -trimprefix op"; DO NOT EDIT.

package bcl

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opNOP-0]
	_ = x[opRET-1]
	_ = x[opPRINT-2]
	_ = x[opSETLOCAL-3]
	_ = x[opGETLOCAL-4]
	_ = x[opDEFBLOCK-5]
	_ = x[opENDBLOCK-6]
	_ = x[opSETFIELD-7]
	_ = x[opGETFIELD-8]
	_ = x[opCONST-9]
	_ = x[opNIL-10]
	_ = x[opZERO-11]
	_ = x[opONE-12]
	_ = x[opTRUE-13]
	_ = x[opFALSE-14]
	_ = x[opNOT-15]
	_ = x[opEQ-16]
	_ = x[opLT-17]
	_ = x[opGT-18]
	_ = x[opADD-19]
	_ = x[opSUB-20]
	_ = x[opMUL-21]
	_ = x[opDIV-22]
	_ = x[opNEG-23]
	_ = x[opJUMP-24]
	_ = x[opLOOP-25]
	_ = x[opJFALSE-26]
	_ = x[opPOP-27]
	_ = x[opPOPN-28]
}

const _opcode_name = "NOPRETPRINTSETLOCALGETLOCALDEFBLOCKENDBLOCKSETFIELDGETFIELDCONSTNILZEROONETRUEFALSENOTEQLTGTADDSUBMULDIVNEGJUMPLOOPJFALSEPOPPOPN"

var _opcode_index = [...]uint8{0, 3, 6, 11, 19, 27, 35, 43, 51, 59, 64, 67, 71, 74, 78, 83, 86, 88, 90, 92, 95, 98, 101, 104, 107, 111, 115, 121, 124, 128}

func (i opcode) String() string {
	if i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
